import cc from 'camelcase';
import op from 'object-path';
import PropTypes from 'prop-types';
import { ComponentEvent, useSyncState } from 'reactium-core/sdk';
import React, { forwardRef, useEffect, useImperativeHandle } from 'react';

/**
 * -----------------------------------------------------------------------------
 * Reactium UI Component: {{name}}
 * -----------------------------------------------------------------------------
 */
const {{name}} = forwardRef((props, ref) => {
    const state = useSyncState({
        value: props.value,
    });

    const dispatch = (type, data = {}) => {
        let evt = new Component(type, data);
        state.dispatchEvent(evt);

        const on = cc(`on-${type}`);
        const handler = op.get(props, on);
        if (typeof handler === 'function') {
            evt = new Component(on, data);
            state.addEventListener(on, handler);
            state.dispatchEvent(evt);
            state.removeEventListener(on, handler);
        }
    };

    useEffect(() => {
        if (props.controlled !== true) return;
        if (state.get('value') === props.value) return;

        state.set('value', props.value);
    }, [props.value]);

    useEffect(() => {
        state.value = state.get('value');
        dispatch('change', { value: state.get('value') });
    }, [state.get('value')]);

    state.props = props;
    state.extend('trigger', dispatch);
    useImperativeHandle(ref, () => state);

    return (
        <>
            {{name}}
        </>
    );
});

{{name}}.propTypes = {
    controlled: PropTypes.bool,
    onChange: PropTypes.func,
};

{{name}}.defaultProps = {
    controlled: true,
    value: null,
};

export { {{name}} };
